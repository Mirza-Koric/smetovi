### Location API Tests

@baseUrl = http://localhost:4000

### Create a new location
# POST {{baseUrl}}/api/locations
# Content-Type: application/json

# {
#   "name": "Wall Street",
#   "address": "New York, NY 10022",
#   "description": "Famous urban park in Manhattan",
#   "longitude": -73.9665,
#   "latitude": 40.7812,
#   "CategoryId": 1
# }

### Get all locations
GET {{baseUrl}}/locations

# ### Get a specific location by ID
# GET {{baseUrl}}/locations/1

# ### Update a location
# PUT {{baseUrl}}/locations/1
# Content-Type: application/json

# {
#   "name": "Central Park Updated",
#   "description": "Updated description for Central Park"
# }

# ### Delete a location
# DELETE {{baseUrl}}/locations/1

# ### Create another location
# POST {{baseUrl}}/locations
# Content-Type: application/json

# {
#   "name": "Eiffel Tower",
#   "address": "Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France",
#   "description": "Iconic iron lattice tower on the Champ de Mars in Paris",
#   "longitude": 2.2945,
#   "latitude": 48.8584,
#   "categoryId": 1,
#   "userId": 1,
# }

# ### Get all locations (after creating new ones)
# GET {{baseUrl}}/locations

# ### Get a non-existent location
# GET {{baseUrl}}/locations/999

# ### Update a non-existent location
# PUT {{baseUrl}}/locations/999
# Content-Type: application/json

# {
#   "name": "Non-existent Location"
# }

# ### Delete a non-existent location
# DELETE {{baseUrl}}/locations/999

# ### Create a location with missing required fields
# POST {{baseUrl}}/locations
# Content-Type: application/json

# {
#   "name": "Incomplete Location"
# }

# ### Create a location with invalid category ID
# POST {{baseUrl}}/locations
# Content-Type: application/json

# {
#   "name": "Invalid Category Location",
#   "address": "Some Address",
#   "categoryId": 9999
# }

# ### Get locations with category details
# GET {{baseUrl}}/locations?include=category

# ### Get locations with user details
# GET {{baseUrl}}/locations?include=users

# ### Get locations within a specific area (if implemented)
# GET {{baseUrl}}/locations?minLat=40&maxLat=41&minLong=-74&maxLong=-73

# ### Search locations by name (if implemented)
# GET {{baseUrl}}/locations?search=park